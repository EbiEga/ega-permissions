openapi: 3.0.3
info:
  title: EGA Permissions API (Public)
  description: The EGA Permissions API is aimed to allow approved users (e.g. Data Access Committee) to control and audit access to EGA datasets. The API currently supports authentication using ELIXIR and EGA credentials for OpenID as well as generated API_KEYs.
  termsOfService: TBD
  contact:
    email: ega-dev@ebi.ac.uk
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local
  - url: https://ega.ebi.ac.uk:8053/ega-permissions
    description: Test
tags:
  - name: Permissions
    description: EGA Data Permissions
  - name: Me
    description: Current user endpoints
  - name: API Key
    description: API Key Endpoints

paths:
  /permissions:
    get:
      tags:
        - Permissions
      summary: Read Permissions.
      description: Read permissions. Parameter accountId must be present either in the QueryString or Header request. Header takes priority.
      operationId: readPermissions
      parameters:
        - name: account-id
          in: query
          description: ID of the user account
          required: false
          schema:
            type: string
        - name: x-account-id
          in: header
          description: ID of the user account
          required: false
          schema:
            type: string
        - name: format
          in: query
          schema:
            $ref: '#/components/schemas/format'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visas'

        400:
          description: Bad request
          content: { }
        404:
          description: User account invalid or not found
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal server error
          content: { }
        503:
          description: Service Unavailable
          content: { }

    post:
      tags:
        - Permissions
      summary: Create Permissions
      description: Create permissions. The account_id can be a namespace qualified
        ID, for example EGA or ELIXIR ID. Parameter accountId must be present either in the QueryString or Header request. Header takes priority.
      operationId: createPermissions
      parameters:
        - name: account-id
          in: query
          description: ID of the user account
          required: false
          schema:
            type: string
        - name: x-account-id
          in: header
          description: ID of the user account
          required: false
          schema:
            type: string
        - name: format
          in: query
          schema:
            $ref: '#/components/schemas/format'
      requestBody:
        description: ID of the user account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassportVisaObjects'

        required: true
      responses:
        207:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponses'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: User account not found
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal server error
          content: { }
        503:
          description: Service Unavailable
          content: { }

    delete:
      tags:
        - Permissions
      summary: Delete Permission
      description: Delete Permission(s). Comma separated values allowed. Set value to 'all' in order remove all permissions from the specified user. Parameter Account ID must be present either in the QueryString or Header request. Header takes priority.
      operationId: deletePermissions
      parameters:
        - name: account-id
          in: query
          description: ID of the user account
          required: false
          schema:
            type: string
        - name: x-account-id
          in: header
          description: ID of the user account
          required: false
          schema:
            type: string
        - name: values
          in: query
          description: Object to which permissions will apply (i.e. Dataset to remove). Comma separated values and 'all' allowed.
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string

      responses:
        200:
          description: OK
          content: { }
        204:
          description: No content (no record has been deleted)
          content: { }
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal server error
          content: { }
        503:
          description: Service Unavailable
          content: { }

  /datasets/{datasetId}/users:
    get:
      tags:
        - Permissions
      summary: List users that have access to dataset
      description: List users that have access to dataset
      operationId: usersWithAccessToDataset
      parameters:
        - name: datasetId
          in: path
          description: ID of the dataset
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountAccess'
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal server error
          content: { }
        503:
          description: Service Unavailable
          content: { }

  /me/permissions:
    get:
      tags:
        - Me
      summary: Get current user permissions
      description: List current user permissions
      operationId: myPermissions
      parameters:
        - name: format
          in: query
          schema:
            $ref: '#/components/schemas/format'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visas'
        400:
          description: Bad request
          content: { }
        404:
          description: User account invalid or not found
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal server error
          content: { }
        503:
          description: Service Unavailable
          content: { }

  /me/access-groups:
    get:
      tags:
        - Me
      summary: Assigned Access Groups
      description: List all Access Groups to which the current user is assigned (i.e. DAC)
      operationId: getCurrentUserAccessGroups
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessGroup'
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal server error
          content: { }
        503:
          description: Service Unavailable
          content: { }

  /api_key/generate:
    get:
      tags:
        - API Key
      summary: Generate a new token
      description: Return a message with the id, the expiration date and the api token
      operationId: generateApiKey
      parameters:
        - name: id
          in: query
          description: ID for the API_KEY
          required: true
          schema:
            type: string
        - name: expiration_date
          in: query
          description: Expiration date in YYYY-MM-DD format
          required: true
          schema:
            type: string
        - name: reason
          in: query
          description: Reason
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedAPIKey'

  /api_key:
    get:
      tags:
        - API Key
      summary: List all tokens
      description: Return the ids of the keys, reasons and their expiration_date
      operationId: getApiKeys
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKeyListItem'

  /api_key/{key}:
    delete:
      tags:
        - API Key
      summary: Delete API Key
      description: Remove an API_TOKEN whenever it is no longer needed
      operationId: deleteApiKey
      parameters:
        - name: key
          in: path
          description: ID of Key to be removed
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content: { }


components:
  schemas:
    Visa:
      type: object
      properties:
        sub:
          type: string
          description: User who applied the action
        iss:
          type: string
          description: Issuer
        iat:
          type: integer
          description: Timestamp of when the Passport Visa was minted
        jti:
          type: string
          description: jti (JWT ID) claim
        exp:
          type: integer
          format: int64
          description: Generally, it is seconds since unix epoch of when the Passport
            Visa Assertion Source requires such a claim to be no longer valid
        ga4gh_visa_v1:
          $ref: '#/components/schemas/PassportVisaObject'
        format:
          $ref: '#/components/schemas/format'
      required:
        - sub
      example:
        sub: EGAW00000015388
        iss: https://ega.ebi.ac.uk:8053/ega-openid-connect-server/
        exp: 1592824514
        iat: 1592820914
        jti: f030c620-993b-49af-a830-4b9af4f379f8
        ga4gh_visa_v1:
          type: ControlledAccessGrants
          asserted: 1568814383
          value: https://ega-archive.org/datasets/EGAD00001002069
          source: https://ega-archive.org/dacs/EGAC00001000514
          by: dac
        format: PLAIN

    JWTVisa:
      type: object
      properties:
        jwt:
          type: string
        format:
          $ref: '#/components/schemas/format'
      example:
        jwt: "[string_token_part1].[string_token_part2].[string_token_part3]"
        format: JWT

    Visas:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/Visa'
          - $ref: '#/components/schemas/JWTVisa'
        discriminator:
          propertyName: format

    PassportVisaObject:
      type: object
      properties:
        type:
          type: string
          description: Visa Type
        asserted:
          type: integer
          format: int64
          description: Timestamp when the action was added or last updated
        value:
          type: string
          description: Object to which permissions will apply
        source:
          type: string
          description: The authority who sanctioned this action
        by:
          type: string
          description: Indicates that the person, service, or broker that applied the action on behalf of the 'source'
        format:
          $ref: '#/components/schemas/format'
      required:
        - type
        - asserted
        - value
        - source
      example:
        type: ControlledAccessGrants
        asserted: 1568814383
        value: https://ega-archive.org/datasets/EGAD00001002069
        source: https://ega-archive.org/dacs/EGAC00001000514
        by: dac
        format: PLAIN

    JWTPassportVisaObject:
      type: object
      properties:
        jwt:
          type: string
        format:
          $ref: '#/components/schemas/format'
      example:
        jwt: "[string_token_part1].[string_token_part2].[string_token_part3]"
        format: JWT

    PassportVisaObjects:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/PassportVisaObject'
          - $ref: '#/components/schemas/JWTPassportVisaObject'
        discriminator:
          propertyName: format

    PermissionsResponse:
      type: object
      properties:
        ga4gh_visa_v1:
          $ref: '#/components/schemas/PassportVisaObject'
        status:
          type: integer
          description: HTTP Status Code
        message:
          type: string
          description: Optional message
        format:
          $ref: '#/components/schemas/format'
      example:
        ga4gh_visa_v1:
          type: ControlledAccessGrants
          asserted: 1568814383
          value: https://ega-archive.org/datasets/EGAD00001002069
          source: https://ega-archive.org/dacs/EGAC00001000514
          by: dac
        status: 201
        message: Success
        format: PLAIN

    JWTPermissionsResponse:
      type: object
      properties:
        ga4gh_visa_v1:
          type: string
          description: JWT string representation
        status:
          type: integer
          description: HTTP Status Code
        message:
          type: string
          description: Optional message
        format:
          $ref: '#/components/schemas/format'
      example:
        ga4gh_visa_v1: "[string_token_part1].[string_token_part2].[string_token_part3]"
        status: 201
        message: Success
        format: JWT

    PermissionsResponses:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/PermissionsResponse'
          - $ref: '#/components/schemas/JWTPermissionsResponse'
        discriminator:
          propertyName: format

    AccountAccess:
      type: object
      properties:
        accountId:
          type: string
          description: Accound ID
        asserted:
          type: integer
          format: int64
          description: Timestamp when the action was added or last updated

    format:
      type: string
      enum: [ JWT, PLAIN ]
      default: JWT

    ErrorBody:
      type: object
      properties:
        timestamp:
          type: string
          description: Server time
        status:
          type: string
          description: Error code
        message:
          type: string
          description: Error message

    APIKeyListItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the API Key
        expiration_date:
          type: integer
          format: int64
          description: Expiration date of the API Key
        reason:
          type: string
          description: Any relevant text provided by the user
      example:
        id: SampleID
        expiration_date: 1592824514
        reason: Sample Token

    CreatedAPIKey:
      type: object
      properties:
        id:
          type: string
          description: ID of the API Key
        expiration_date:
          type: integer
          format: int64
          description: Expiration date of the API Key
        token:
          type: string
          description: Token
      example:
        id: SampleID
        expiration_date: 1592824514
        token: generated.token=

    AccessGroup:
      type: object
      properties:
        groupId:
          type: string
          description: ID of the Access Group (i.e. dacStableId)
        permission:
          $ref: '#/components/schemas/PermissionLevel'
        description:
          type: string

    PermissionLevel:
      type: string
      enum: [ READ, WRITE ]
      default: READ

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

    ApiKeyAuth:
      type: apiKey
      in: header
      name: API_KEY

security:
  - BearerAuth: [ ]
  - ApiKeyAuth: [ ]